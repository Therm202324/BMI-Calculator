{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# health_app.py\n",
        "\n",
        "import subprocess\n",
        "import sys\n",
        "\n",
        "# --- Install dependencies if not installed ---\n",
        "def install(package):\n",
        "    subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n",
        "\n",
        "try:\n",
        "    import gradio as gr\n",
        "except ImportError:\n",
        "    install(\"gradio\")\n",
        "    import gradio as gr\n",
        "\n",
        "try:\n",
        "    import pandas as pd\n",
        "except ImportError:\n",
        "    install(\"pandas\")\n",
        "    import pandas as pd\n",
        "\n",
        "try:\n",
        "    import matplotlib.pyplot as plt\n",
        "except ImportError:\n",
        "    install(\"matplotlib\")\n",
        "    import matplotlib.pyplot as plt\n",
        "\n",
        "from datetime import datetime, date, timedelta\n",
        "\n",
        "# Utils: Conversion\n",
        "def to_kg(weight, unit):\n",
        "    return weight if unit == \"kg\" else weight * 0.45359237\n",
        "\n",
        "def to_cm(height, unit):\n",
        "    return height if unit == \"cm\" else height * 2.54\n",
        "\n",
        "# Constants\n",
        "BMI_BANDS = [\n",
        "    (0, 18.5, \"Underweight\", \"#3b82f6\"),\n",
        "    (18.5, 25, \"Normal\", \"#10b981\"),\n",
        "    (25, 30, \"Overweight\", \"#f59e0b\"),\n",
        "    (30, 1000, \"Obese\", \"#ef4444\"),\n",
        "]\n",
        "\n",
        "ACTIVITY_FACTORS = {\n",
        "    \"Sedentary (little or no exercise)\": 1.2,\n",
        "    \"Lightly active (1-3 days/week)\": 1.375,\n",
        "    \"Moderately active (3-5 days/week)\": 1.55,\n",
        "    \"Very active (6-7 days/week)\": 1.725,\n",
        "    \"Extra active (hard exercise + physical job)\": 1.9,\n",
        "}\n",
        "\n",
        "COMMON_FOODS = {\n",
        "    \"Apple (medium) ~95 kcal\": 95,\n",
        "    \"Banana (medium) ~105 kcal\": 105,\n",
        "    \"Boiled egg ~78 kcal\": 78,\n",
        "    \"Chicken breast 100g ~165 kcal\": 165,\n",
        "    \"Cooked rice 1 cup ~200 kcal\": 200,\n",
        "    \"Bread slice ~80 kcal\": 80,\n",
        "    \"Whole milk 1 cup ~150 kcal\": 150,\n",
        "    \"Stir-fried vegetables 1 cup ~180 kcal\": 180,\n",
        "    \"Pad Thai (1 plate) ~600 kcal\": 600,\n",
        "    \"Som Tam (papaya salad) ~150 kcal\": 150,\n",
        "    \"Tom Yum (1 bowl) ~250 kcal\": 250,\n",
        "}\n",
        "\n",
        "# --- BMI Calculator with user name ---\n",
        "def bmi_calculate_user(name, height_value, height_unit, weight_value, weight_unit, d, user_state, body_state):\n",
        "    if not name:\n",
        "        return gr.update(value=\"\"), gr.update(value=\"\"), gr.update(value=None), user_state, body_state\n",
        "    if name not in user_state:\n",
        "        user_state[name] = {\"bmi_history\":[]}\n",
        "\n",
        "    h_cm = to_cm(height_value, height_unit)\n",
        "    w_kg = to_kg(weight_value, weight_unit)\n",
        "    if h_cm<=0 or w_kg<=0:\n",
        "        return gr.update(value=\"Invalid inputs\"), gr.update(value=\"\"), gr.update(value=None), user_state, body_state\n",
        "\n",
        "    bmi = w_kg / ((h_cm/100)**2)\n",
        "    bmi_text = f\"{bmi:.2f}\"\n",
        "\n",
        "    for lo, hi, label, color in BMI_BANDS:\n",
        "        if lo <= bmi < hi:\n",
        "            category = label\n",
        "            break\n",
        "\n",
        "    try:\n",
        "        d_obj = datetime.strptime(d, \"%Y-%m-%d\").date() if d else date.today()\n",
        "    except:\n",
        "        d_obj = date.today()\n",
        "\n",
        "    # เก็บประวัติ\n",
        "    user_state[name][\"bmi_history\"].append({\"date\": d_obj.isoformat(), \"bmi\": round(bmi,2)})\n",
        "    df = pd.DataFrame(user_state[name][\"bmi_history\"]).drop_duplicates(subset=[\"date\"], keep=\"last\").sort_values(\"date\")\n",
        "\n",
        "    fig = plt.figure(figsize=(5.5,3.2))\n",
        "    plt.plot(pd.to_datetime(df[\"date\"]), df[\"bmi\"], marker=\"o\")\n",
        "    plt.axhspan(0,18.5, alpha=0.1)\n",
        "    plt.axhspan(18.5,25, alpha=0.1)\n",
        "    plt.axhspan(25,30, alpha=0.1)\n",
        "    plt.axhspan(30,60, alpha=0.1)\n",
        "    plt.title(f\"BMI Over Time - {name}\")\n",
        "    plt.ylabel(\"BMI\")\n",
        "    plt.xlabel(\"Date\")\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # 👇 บันทึกค่า height/weight ลง state\n",
        "    body_state = {\"height_cm\": h_cm, \"weight_kg\": w_kg}\n",
        "\n",
        "    return bmi_text, category, fig, user_state, body_state\n",
        "\n",
        "# --- BMR / TDEE Calculator ---\n",
        "def calc_bmr_tdee(age, gender, height_cm, weight_kg, activity):\n",
        "    if any(v is None for v in [age, gender, height_cm, weight_kg]) or age <= 0 or height_cm <= 0 or weight_kg <= 0:\n",
        "        return gr.update(value=\"\"), gr.update(value=\"\"), gr.update(value=\"\"), gr.update(value=None), None\n",
        "\n",
        "    if gender == \"Male\":\n",
        "        bmr = 88.362 + (13.397 * weight_kg) + (4.799 * height_cm) - (5.677 * age)\n",
        "    else:\n",
        "        bmr = 447.593 + (9.247 * weight_kg) + (3.098 * height_cm) - (4.330 * age)\n",
        "\n",
        "    factor = ACTIVITY_FACTORS.get(activity, 1.2)\n",
        "    tdee = bmr * factor\n",
        "\n",
        "    maintenance = round(tdee)\n",
        "    mild_loss = round(tdee - 250)\n",
        "    loss_500 = round(tdee - 500)\n",
        "    aggressive_loss = round(tdee - 750)\n",
        "    mild_gain = round(tdee + 250)\n",
        "    gain_500 = round(tdee + 500)\n",
        "\n",
        "    table = pd.DataFrame({\n",
        "        \"Goal\": [\n",
        "            \"Aggressive loss (~-0.75 kg/week)\",\n",
        "            \"Loss (~-0.5 kg/week)\",\n",
        "            \"Mild loss (~-0.25 kg/week)\",\n",
        "            \"Maintenance\",\n",
        "            \"Mild gain (~+0.25 kg/week)\",\n",
        "            \"Gain (~+0.5 kg/week)\",\n",
        "        ],\n",
        "        \"Target Calories (kcal/day)\": [\n",
        "            aggressive_loss, loss_500, mild_loss, maintenance, mild_gain, gain_500\n",
        "        ],\n",
        "    })\n",
        "\n",
        "    info = \"Calculated using Harris–Benedict (Roza & Shizgal, 1984).\"\n",
        "\n",
        "    return f\"{bmr:.0f}\", f\"{tdee:.0f}\", table, info, round(tdee)\n",
        "\n",
        "# --- Food Tracker ---\n",
        "def add_food_entry(selected_food, servings, manual_name, manual_kcal, entry_date, log_state, tdee_state):\n",
        "    if log_state is None:\n",
        "        log_state = []\n",
        "\n",
        "    entries_to_add = []\n",
        "\n",
        "    if manual_name and manual_kcal:\n",
        "        try:\n",
        "            kcal = float(manual_kcal)\n",
        "            if kcal > 0:\n",
        "                entries_to_add.append({\"name\": manual_name.strip(), \"kcal\": kcal})\n",
        "        except ValueError:\n",
        "            pass # Handle invalid manual_kcal later\n",
        "    elif selected_food:\n",
        "        if isinstance(selected_food, list): # Handle multiselect output\n",
        "            for food_item in selected_food:\n",
        "                kcal = COMMON_FOODS.get(food_item, 0)\n",
        "                if kcal > 0:\n",
        "                    entries_to_add.append({\"name\": food_item, \"kcal\": kcal})\n",
        "        else: # Handle single select output\n",
        "            kcal = COMMON_FOODS.get(selected_food, 0)\n",
        "            if kcal > 0:\n",
        "                entries_to_add.append({\"name\": selected_food, \"kcal\": kcal})\n",
        "\n",
        "    if not entries_to_add:\n",
        "        return gr.update(value=None), gr.update(value=None), log_state, gr.update(value=\"Please select a food or enter manual calories.\"), gr.update(value=None)\n",
        "\n",
        "    servings = servings or 1\n",
        "\n",
        "    try:\n",
        "        d_obj = datetime.strptime(entry_date, \"%Y-%m-%d\").date() if entry_date else date.today()\n",
        "    except Exception:\n",
        "        d_obj = date.today()\n",
        "\n",
        "    for entry in entries_to_add:\n",
        "        log_state.append({\n",
        "            \"date\": d_obj.isoformat(),\n",
        "            \"item\": entry[\"name\"],\n",
        "            \"servings\": servings,\n",
        "            \"kcal\": round(entry[\"kcal\"] * servings, 0),\n",
        "        })\n",
        "\n",
        "\n",
        "    today_iso = d_obj.isoformat()\n",
        "    df = pd.DataFrame(log_state)\n",
        "    today_df = df[df[\"date\"] == today_iso][[\"item\", \"servings\", \"kcal\"]]\n",
        "    today_total = int(today_df[\"kcal\"].sum()) if not today_df.empty else 0\n",
        "\n",
        "    compare_msg = \"\"\n",
        "    if tdee_state and tdee_state > 0:\n",
        "        diff = tdee_state - today_total\n",
        "        compare_msg = f\"Remaining vs TDEE: {diff} kcal\" if diff > 0 else f\"Over TDEE by {abs(diff)} kcal\"\n",
        "\n",
        "    end_day = d_obj\n",
        "    days = [(end_day - timedelta(days=i)).isoformat() for i in range(6, -1, -1)]\n",
        "    week_totals = []\n",
        "    for d in days:\n",
        "        day_total = int(df[df[\"date\"] == d][\"kcal\"].sum()) if not df.empty else 0\n",
        "        week_totals.append(day_total)\n",
        "\n",
        "    fig = plt.figure(figsize=(5.5, 3.2))\n",
        "    plt.bar(range(len(days)), week_totals)\n",
        "    if tdee_state and tdee_state > 0:\n",
        "        plt.axhline(y=tdee_state, linestyle=\"--\")\n",
        "    plt.xticks(range(len(days)), [d[5:] for d in days])\n",
        "    plt.title(\"Weekly Calorie Intake (Last 7 Days)\")\n",
        "    plt.ylabel(\"kcal\")\n",
        "    plt.tight_layout()\n",
        "\n",
        "    return today_df, today_total, log_state, compare_msg, fig\n",
        "\n",
        "def reset_today(date_str, log_state):\n",
        "    if log_state is None:\n",
        "        return gr.update(value=None), 0, []\n",
        "    try:\n",
        "        d_obj = datetime.strptime(date_str, \"%Y-%m-%d\").date() if date_str else date.today()\n",
        "    except Exception:\n",
        "        d_obj = date.today()\n",
        "    keep = [e for e in log_state if e[\"date\"] != d_obj.isoformat()]\n",
        "    return gr.update(value=None), 0, keep\n",
        "\n",
        "# --- UI with Gradio ---\n",
        "with gr.Blocks(title=\"Health Calculator • BMI • BMR • Food Tracker\") as demo:\n",
        "    gr.Markdown(\"# 🎰 Health Calculator App\")\n",
        "\n",
        "    user_state = gr.State(value={})\n",
        "    tdee_state = gr.State(value=None)\n",
        "    food_log_state = gr.State(value=[])\n",
        "    body_state = gr.State(value={\"height_cm\": 0, \"weight_kg\": 0})  # 👈 state เก็บ body\n",
        "\n",
        "    # Tab 1 – BMI\n",
        "    with gr.Tab(\"BMI Calculator\"):\n",
        "        with gr.Row():\n",
        "            with gr.Column():\n",
        "                name_in = gr.Textbox(label=\"Name\")\n",
        "                height = gr.Number(label=\"Height\", value=0)\n",
        "                height_unit = gr.Radio([\"cm\",\"in\"], value=\"cm\", label=\"Height unit\")\n",
        "                weight = gr.Number(label=\"Weight\", value=0)\n",
        "                weight_unit = gr.Radio([\"kg\",\"lb\"], value=\"kg\", label=\"Weight unit\")\n",
        "                date_in = gr.Textbox(label=\"Date (YYYY-MM-DD)\", value=date.today().isoformat())\n",
        "                calc_btn = gr.Button(\"Calculate BMI\", variant=\"primary\")\n",
        "            with gr.Column():\n",
        "                bmi_out = gr.Textbox(label=\"BMI\", interactive=False)\n",
        "                cat_out = gr.Textbox(label=\"Category\", interactive=False)\n",
        "                bmi_plot = gr.Plot(label=\"BMI over time\")\n",
        "\n",
        "        calc_btn.click(\n",
        "            bmi_calculate_user,\n",
        "            inputs=[name_in, height, height_unit, weight, weight_unit, date_in, user_state, body_state],\n",
        "            outputs=[bmi_out, cat_out, bmi_plot, user_state, body_state],\n",
        "        )\n",
        "\n",
        "    # Tab 2 – BMR/TDEE\n",
        "    with gr.Tab(\"Daily Metabolic Rate\"):\n",
        "        with gr.Row():\n",
        "            with gr.Column():\n",
        "                age = gr.Number(label=\"Age (years)\", value=0)\n",
        "                gender = gr.Radio([\"Male\", \"Female\"], label=\"Gender\", value=\"Male\")\n",
        "                activity = gr.Dropdown(list(ACTIVITY_FACTORS.keys()), value=list(ACTIVITY_FACTORS.keys())[1], label=\"Activity level\")\n",
        "                calc_bmr_btn = gr.Button(\"Calculate BMR & TDEE\", variant=\"primary\")\n",
        "            with gr.Column():\n",
        "                bmr_txt = gr.Textbox(label=\"BMR (kcal/day)\", interactive=False)\n",
        "                tdee_txt = gr.Textbox(label=\"TDEE (kcal/day)\", interactive=False)\n",
        "                goal_table = gr.Dataframe(label=\"Suggested calorie targets\", interactive=False)\n",
        "                info_md = gr.Markdown()\n",
        "\n",
        "        def _update_tdee(age, gender, activity, body_state):\n",
        "            h_cm = body_state[\"height_cm\"]\n",
        "            w_kg = body_state[\"weight_kg\"]\n",
        "            bmr, tdee, table, info, tdee_value = calc_bmr_tdee(age, gender, h_cm, w_kg, activity)\n",
        "            return bmr, tdee, table, info, tdee_value\n",
        "\n",
        "        calc_bmr_btn.click(\n",
        "            _update_tdee,\n",
        "            inputs=[age, gender, activity, body_state],\n",
        "            outputs=[bmr_txt, tdee_txt, goal_table, info_md, tdee_state],\n",
        "        )\n",
        "\n",
        "    # Tab 3 – Food Tracker\n",
        "    with gr.Tab(\"Food Tracker\"):\n",
        "        with gr.Row():\n",
        "            with gr.Column():\n",
        "                food_pick = gr.Dropdown(\n",
        "                    choices=sorted(COMMON_FOODS.keys()),\n",
        "                    label=\"Common foods\",\n",
        "                    multiselect=True,\n",
        "                    value=[]\n",
        "                )\n",
        "                servings = gr.Number(label=\"Servings\", value=1)\n",
        "                gr.Markdown(\"**Or manual entry:**\")\n",
        "                manual_name = gr.Textbox(label=\"Food name\")\n",
        "                manual_kcal = gr.Number(label=\"Calories (kcal)\")\n",
        "                entry_date = gr.Textbox(label=\"Date (YYYY-MM-DD)\", value=date.today().isoformat())\n",
        "                add_btn = gr.Button(\"Add Entry\", variant=\"primary\")\n",
        "                reset_btn = gr.Button(\"Clear Today\")\n",
        "            with gr.Column():\n",
        "                today_table = gr.Dataframe(\n",
        "                    headers=[\"item\", \"servings\", \"kcal\"],\n",
        "                    label=\"Today's Entries\",\n",
        "                    interactive=False\n",
        "                )\n",
        "                today_total = gr.Number(label=\"Today's total (kcal)\", interactive=False)\n",
        "                compare_msg = gr.Markdown()\n",
        "                weekly_plot = gr.Plot(label=\"Weekly Intake vs TDEE\")\n",
        "\n",
        "        add_btn.click(\n",
        "            add_food_entry,\n",
        "            inputs=[food_pick, servings, manual_name, manual_kcal, entry_date, food_log_state, tdee_state],\n",
        "            outputs=[today_table, today_total, food_log_state, compare_msg, weekly_plot],\n",
        "        )\n",
        "\n",
        "        reset_btn.click(\n",
        "            reset_today,\n",
        "            inputs=[entry_date, food_log_state],\n",
        "            outputs=[today_table, today_total, food_log_state],\n",
        "        )\n",
        "\n",
        "# Launch\n",
        "if __name__ == \"__main__\":\n",
        "    demo.launch()"
      ],
      "metadata": {
        "id": "Oyss5jCXTEps",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 655
        },
        "outputId": "c7287b96-372b-4c25-f069-35ab9f3ccc7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It looks like you are running Gradio on a hosted Jupyter notebook, which requires `share=True`. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://b42cad86aaaed1166e.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://b42cad86aaaed1166e.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}