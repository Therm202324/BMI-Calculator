# -*- coding: utf-8 -*-
"""BMICalculation_Therm_Chap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VkONj7T_bKO65Nx7ftjYaiJ8OTb0nFJC
"""

# health_app.py

import subprocess
import sys

# --- Install dependencies if not installed ---
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

try:
    import gradio as gr
except ImportError:
    install("gradio")
    import gradio as gr

try:
    import pandas as pd
except ImportError:
    install("pandas")
    import pandas as pd

try:
    import matplotlib.pyplot as plt
except ImportError:
    install("matplotlib")
    import matplotlib.pyplot as plt

from datetime import datetime, date, timedelta

# Utils: Conversion
def to_kg(weight, unit):
    return weight if unit == "kg" else weight * 0.45359237

def to_cm(height, unit):
    return height if unit == "cm" else height * 2.54

# Constants
BMI_BANDS = [
    (0, 18.5, "Underweight", "#3b82f6"),
    (18.5, 25, "Normal", "#10b981"),
    (25, 30, "Overweight", "#f59e0b"),
    (30, 1000, "Obese", "#ef4444"),
]

ACTIVITY_FACTORS = {
    "Sedentary (little or no exercise)": 1.2,
    "Lightly active (1-3 days/week)": 1.375,
    "Moderately active (3-5 days/week)": 1.55,
    "Very active (6-7 days/week)": 1.725,
    "Extra active (hard exercise + physical job)": 1.9,
}

COMMON_FOODS = {
    "Apple (medium) ~95 kcal": 95,
    "Banana (medium) ~105 kcal": 105,
    "Boiled egg ~78 kcal": 78,
    "Chicken breast 100g ~165 kcal": 165,
    "Cooked rice 1 cup ~200 kcal": 200,
    "Bread slice ~80 kcal": 80,
    "Whole milk 1 cup ~150 kcal": 150,
    "Stir-fried vegetables 1 cup ~180 kcal": 180,
    "Pad Thai (1 plate) ~600 kcal": 600,
    "Som Tam (papaya salad) ~150 kcal": 150,
    "Tom Yum (1 bowl) ~250 kcal": 250,
}

# --- BMI Calculator with user name ---
def bmi_calculate_user(name, height_value, height_unit, weight_value, weight_unit, d, user_state, body_state):
    if not name:
        return gr.update(value=""), gr.update(value=""), gr.update(value=None), user_state, body_state
    if name not in user_state:
        user_state[name] = {"bmi_history":[]}

    h_cm = to_cm(height_value, height_unit)
    w_kg = to_kg(weight_value, weight_unit)
    if h_cm<=0 or w_kg<=0:
        return gr.update(value="Invalid inputs"), gr.update(value=""), gr.update(value=None), user_state, body_state

    bmi = w_kg / ((h_cm/100)**2)
    bmi_text = f"{bmi:.2f}"

    for lo, hi, label, color in BMI_BANDS:
        if lo <= bmi < hi:
            category = label
            break

    try:
        d_obj = datetime.strptime(d, "%Y-%m-%d").date() if d else date.today()
    except:
        d_obj = date.today()

    # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    user_state[name]["bmi_history"].append({"date": d_obj.isoformat(), "bmi": round(bmi,2)})
    df = pd.DataFrame(user_state[name]["bmi_history"]).drop_duplicates(subset=["date"], keep="last").sort_values("date")

    fig = plt.figure(figsize=(5.5,3.2))
    plt.plot(pd.to_datetime(df["date"]), df["bmi"], marker="o")
    plt.axhspan(0,18.5, alpha=0.1)
    plt.axhspan(18.5,25, alpha=0.1)
    plt.axhspan(25,30, alpha=0.1)
    plt.axhspan(30,60, alpha=0.1)
    plt.title(f"BMI Over Time - {name}")
    plt.ylabel("BMI")
    plt.xlabel("Date")
    plt.tight_layout()

    # üëá ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ height/weight ‡∏•‡∏á state
    body_state = {"height_cm": h_cm, "weight_kg": w_kg}

    return bmi_text, category, fig, user_state, body_state

# --- BMR / TDEE Calculator ---
def calc_bmr_tdee(age, gender, height_cm, weight_kg, activity):
    if any(v is None for v in [age, gender, height_cm, weight_kg]) or age <= 0 or height_cm <= 0 or weight_kg <= 0:
        return gr.update(value=""), gr.update(value=""), gr.update(value=""), gr.update(value=None), None

    if gender == "Male":
        bmr = 88.362 + (13.397 * weight_kg) + (4.799 * height_cm) - (5.677 * age)
    else:
        bmr = 447.593 + (9.247 * weight_kg) + (3.098 * height_cm) - (4.330 * age)

    factor = ACTIVITY_FACTORS.get(activity, 1.2)
    tdee = bmr * factor

    maintenance = round(tdee)
    mild_loss = round(tdee - 250)
    loss_500 = round(tdee - 500)
    aggressive_loss = round(tdee - 750)
    mild_gain = round(tdee + 250)
    gain_500 = round(tdee + 500)

    table = pd.DataFrame({
        "Goal": [
            "Aggressive loss (~-0.75 kg/week)",
            "Loss (~-0.5 kg/week)",
            "Mild loss (~-0.25 kg/week)",
            "Maintenance",
            "Mild gain (~+0.25 kg/week)",
            "Gain (~+0.5 kg/week)",
        ],
        "Target Calories (kcal/day)": [
            aggressive_loss, loss_500, mild_loss, maintenance, mild_gain, gain_500
        ],
    })

    info = "Calculated using Harris‚ÄìBenedict (Roza & Shizgal, 1984)."

    return f"{bmr:.0f}", f"{tdee:.0f}", table, info, round(tdee)

# --- Food Tracker ---
def add_food_entry(selected_food, servings, manual_name, manual_kcal, entry_date, log_state, tdee_state):
    if log_state is None:
        log_state = []

    entries_to_add = []

    if manual_name and manual_kcal:
        try:
            kcal = float(manual_kcal)
            if kcal > 0:
                entries_to_add.append({"name": manual_name.strip(), "kcal": kcal})
        except ValueError:
            pass # Handle invalid manual_kcal later
    elif selected_food:
        if isinstance(selected_food, list): # Handle multiselect output
            for food_item in selected_food:
                kcal = COMMON_FOODS.get(food_item, 0)
                if kcal > 0:
                    entries_to_add.append({"name": food_item, "kcal": kcal})
        else: # Handle single select output
            kcal = COMMON_FOODS.get(selected_food, 0)
            if kcal > 0:
                entries_to_add.append({"name": selected_food, "kcal": kcal})

    if not entries_to_add:
        return gr.update(value=None), gr.update(value=None), log_state, gr.update(value="Please select a food or enter manual calories."), gr.update(value=None)

    servings = servings or 1

    try:
        d_obj = datetime.strptime(entry_date, "%Y-%m-%d").date() if entry_date else date.today()
    except Exception:
        d_obj = date.today()

    for entry in entries_to_add:
        log_state.append({
            "date": d_obj.isoformat(),
            "item": entry["name"],
            "servings": servings,
            "kcal": round(entry["kcal"] * servings, 0),
        })


    today_iso = d_obj.isoformat()
    df = pd.DataFrame(log_state)
    today_df = df[df["date"] == today_iso][["item", "servings", "kcal"]]
    today_total = int(today_df["kcal"].sum()) if not today_df.empty else 0

    compare_msg = ""
    if tdee_state and tdee_state > 0:
        diff = tdee_state - today_total
        compare_msg = f"Remaining vs TDEE: {diff} kcal" if diff > 0 else f"Over TDEE by {abs(diff)} kcal"

    end_day = d_obj
    days = [(end_day - timedelta(days=i)).isoformat() for i in range(6, -1, -1)]
    week_totals = []
    for d in days:
        day_total = int(df[df["date"] == d]["kcal"].sum()) if not df.empty else 0
        week_totals.append(day_total)

    fig = plt.figure(figsize=(5.5, 3.2))
    plt.bar(range(len(days)), week_totals)
    if tdee_state and tdee_state > 0:
        plt.axhline(y=tdee_state, linestyle="--")
    plt.xticks(range(len(days)), [d[5:] for d in days])
    plt.title("Weekly Calorie Intake (Last 7 Days)")
    plt.ylabel("kcal")
    plt.tight_layout()

    return today_df, today_total, log_state, compare_msg, fig

def reset_today(date_str, log_state):
    if log_state is None:
        return gr.update(value=None), 0, []
    try:
        d_obj = datetime.strptime(date_str, "%Y-%m-%d").date() if date_str else date.today()
    except Exception:
        d_obj = date.today()
    keep = [e for e in log_state if e["date"] != d_obj.isoformat()]
    return gr.update(value=None), 0, keep

# --- UI with Gradio ---
with gr.Blocks(title="Health Calculator ‚Ä¢ BMI ‚Ä¢ BMR ‚Ä¢ Food Tracker") as demo:
    gr.Markdown("# üé∞ Health Calculator App")

    user_state = gr.State(value={})
    tdee_state = gr.State(value=None)
    food_log_state = gr.State(value=[])
    body_state = gr.State(value={"height_cm": 0, "weight_kg": 0})  # üëà state ‡πÄ‡∏Å‡πá‡∏ö body

    # Tab 1 ‚Äì BMI
    with gr.Tab("BMI Calculator"):
        with gr.Row():
            with gr.Column():
                name_in = gr.Textbox(label="Name")
                height = gr.Number(label="Height", value=0)
                height_unit = gr.Radio(["cm","in"], value="cm", label="Height unit")
                weight = gr.Number(label="Weight", value=0)
                weight_unit = gr.Radio(["kg","lb"], value="kg", label="Weight unit")
                date_in = gr.Textbox(label="Date (YYYY-MM-DD)", value=date.today().isoformat())
                calc_btn = gr.Button("Calculate BMI", variant="primary")
            with gr.Column():
                bmi_out = gr.Textbox(label="BMI", interactive=False)
                cat_out = gr.Textbox(label="Category", interactive=False)
                bmi_plot = gr.Plot(label="BMI over time")

        calc_btn.click(
            bmi_calculate_user,
            inputs=[name_in, height, height_unit, weight, weight_unit, date_in, user_state, body_state],
            outputs=[bmi_out, cat_out, bmi_plot, user_state, body_state],
        )

    # Tab 2 ‚Äì BMR/TDEE
    with gr.Tab("Daily Metabolic Rate"):
        with gr.Row():
            with gr.Column():
                age = gr.Number(label="Age (years)", value=0)
                gender = gr.Radio(["Male", "Female"], label="Gender", value="Male")
                activity = gr.Dropdown(list(ACTIVITY_FACTORS.keys()), value=list(ACTIVITY_FACTORS.keys())[1], label="Activity level")
                calc_bmr_btn = gr.Button("Calculate BMR & TDEE", variant="primary")
            with gr.Column():
                bmr_txt = gr.Textbox(label="BMR (kcal/day)", interactive=False)
                tdee_txt = gr.Textbox(label="TDEE (kcal/day)", interactive=False)
                goal_table = gr.Dataframe(label="Suggested calorie targets", interactive=False)
                info_md = gr.Markdown()

        def _update_tdee(age, gender, activity, body_state):
            h_cm = body_state["height_cm"]
            w_kg = body_state["weight_kg"]
            bmr, tdee, table, info, tdee_value = calc_bmr_tdee(age, gender, h_cm, w_kg, activity)
            return bmr, tdee, table, info, tdee_value

        calc_bmr_btn.click(
            _update_tdee,
            inputs=[age, gender, activity, body_state],
            outputs=[bmr_txt, tdee_txt, goal_table, info_md, tdee_state],
        )

    # Tab 3 ‚Äì Food Tracker
    with gr.Tab("Food Tracker"):
        with gr.Row():
            with gr.Column():
                food_pick = gr.Dropdown(
                    choices=sorted(COMMON_FOODS.keys()),
                    label="Common foods",
                    multiselect=True,
                    value=[]
                )
                servings = gr.Number(label="Servings", value=1)
                gr.Markdown("**Or manual entry:**")
                manual_name = gr.Textbox(label="Food name")
                manual_kcal = gr.Number(label="Calories (kcal)")
                entry_date = gr.Textbox(label="Date (YYYY-MM-DD)", value=date.today().isoformat())
                add_btn = gr.Button("Add Entry", variant="primary")
                reset_btn = gr.Button("Clear Today")
            with gr.Column():
                today_table = gr.Dataframe(
                    headers=["item", "servings", "kcal"],
                    label="Today's Entries",
                    interactive=False
                )
                today_total = gr.Number(label="Today's total (kcal)", interactive=False)
                compare_msg = gr.Markdown()
                weekly_plot = gr.Plot(label="Weekly Intake vs TDEE")

        add_btn.click(
            add_food_entry,
            inputs=[food_pick, servings, manual_name, manual_kcal, entry_date, food_log_state, tdee_state],
            outputs=[today_table, today_total, food_log_state, compare_msg, weekly_plot],
        )

        reset_btn.click(
            reset_today,
            inputs=[entry_date, food_log_state],
            outputs=[today_table, today_total, food_log_state],
        )

# Launch
if __name__ == "__main__":
    demo.launch()